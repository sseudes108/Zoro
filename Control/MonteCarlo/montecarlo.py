import numpy as np
import streamlit as st

def rodar_simulacao(df_carteira, n_simulacoes):
    """
    Roda uma simula√ß√£o de Monte Carlo sobre uma carteira de prospects.

    Args:
        df_carteira (pd.DataFrame): DataFrame com as colunas 'score_recuperacao' e 'valor_divida_mil'.
        n_simulacoes (int): O n√∫mero de cen√°rios a serem simulados.

    Returns:
        list: Uma lista contendo o valor total recuperado para cada simula√ß√£o.
    """
    print(f"Iniciando Simula√ß√£o de Monte Carlo com {n_simulacoes} cen√°rios...")
    
    # Extrair as probabilidades e valores para arrays NumPy (muito mais r√°pido)
    probabilidades = df_carteira['score_recuperacao'].values
    valores = df_carteira['valor_divida_mil'].values * 1000 # Convertendo para valor real
    
    resultados_simulacao = []
    
    for i in range(n_simulacoes):
        if i == 0:
            print(f"üé≤ Simulando {i+1}/{n_simulacoes}")
        elif i%1000 == 0:
            print(f"üé≤ Simulando {i}/{n_simulacoes}")
            
        # Gera um n√∫mero aleat√≥rio (0 a 1) para cada prospect
        random_rolls = np.random.rand(len(df_carteira))
        
        # Compara o n√∫mero aleat√≥rio com a probabilidade de pagamento
        # O resultado √© um array de True/False (pagou / n√£o pagou)
        pagou = random_rolls < probabilidades
        
        # Soma o valor da d√≠vida apenas dos que pagaram (onde 'pagou' √© True)
        valor_recuperado_nesta_simulacao = np.sum(valores[pagou])
        
        resultados_simulacao.append(valor_recuperado_nesta_simulacao)
        
    print(f"‚úÖ Simula√ß√£o conclu√≠da {n_simulacoes}/{n_simulacoes}")    
    return resultados_simulacao